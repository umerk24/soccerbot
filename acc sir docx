#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdint.h>

#define SS_PIN PB4
#define S1_PIN PB5
#define S2_PIN PB6
#define S3_PIN PB7
#define ECHO_PIN PB0
#define TRIG_PIN PB1
#define LEFT_MOTOR_PIN PB2
#define RIGHT_MOTOR_PIN PB3

volatile uint8_t received_byte = 0;

void spi_init_master(void)
{
    /* Set MOSI, SCK, and SS as outputs */
    DDRB |= (1 << DDB5) | (1 << DDB7) | (1 << DDB4);

    /* Enable SPI, Master mode, set clock rate fosc/16 */
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);

    /* Enable SPI interrupt */
    SPCR |= (1 << SPIE);
}

void motor_init(void)
{
    /* Set left and right motor pins as outputs */
    DDRB |= (1 << LEFT_MOTOR_PIN) | (1 << RIGHT_MOTOR_PIN);

    /* Set both motors to stop */
    PORTB &= ~((1 << LEFT_MOTOR_PIN) | (1 << RIGHT_MOTOR_PIN));
}

void ultrasonic_init(void)
{
    /* Set trigger pin as output */
    DDRB |= (1 << TRIG_PIN);

    /* Set echo pin as input */
    DDRB &= ~(1 << ECHO_PIN);

    /* Set pull-up resistor for echo pin */
    PORTB |= (1 << ECHO_PIN);
}

uint16_t ultrasonic_read(void)
{
    uint16_t distance;

    /* Send 10us pulse to trigger pin */
    PORTB |= (1 << TRIG_PIN);
    _delay_us(10);
    PORTB &= ~(1 << TRIG_PIN);

    /* Wait for echo to start */
    while(!(PINB & (1 << ECHO_PIN)));

    /* Calculate echo duration */
    uint16_t time_start = TCNT1;
    while(PINB & (1 << ECHO_PIN));
    uint16_t time_end = TCNT1;
    uint16_t pulse_duration = time_end - time_start;

    /* Convert pulse duration to distance in cm */
    distance = pulse_duration / 58;

    return distance;
}

void move_forward(void)
{
    /* Set both motors to move forward */
    PORTB |= (1 << LEFT_MOTOR_PIN) | (1 << RIGHT_MOTOR_PIN);
    PORTB &= ~((1 << LEFT_MOTOR_PIN) | (1 << RIGHT_MOTOR_PIN));
}

void stop(void)
{
    /* Set both motors to stop */
    PORTB &= ~((1 << LEFT_MOTOR_PIN) | (1 << RIGHT_MOTOR_PIN));
}

ISR(SPI_STC_vect)
{
    received_byte = SPDR;
}

void spi_send_byte(uint8_t data)
{
    /* Wait for previous transmission to complete */
    while(!(SPSR & (1 << SPIF)));

    /* Send data byte */
    SPDR = data;
}

int main(void)
{
    spi_init_master();
    motor_init();
    ultrasonic_init();

    /* Set SS pin as output */
    DDRB |= (1 << SS_PIN);

    /* Enable timer1 for ultrasonic sensor */
    TCCR1B |= (1 << CS10);

    while(1)
    {
        /* Wait for start position configuration */
        while(!(PINB & (1 << S1_PIN)));

        /* Wait for button release */
        _delay_ms(100);
        while((PINB & (1 << S1_PIN)));

        /* Wait for goal position configuration */
        while(!(PINB & (1 << S2_PIN)));

        /* Wait for button release */
        _delay_ms(100);
        while((PINB & (1 << S2_PIN)));

        /* Wait for start command */
        while(!(PINB & (1 << S3_PIN)));

        /* Wait for button release */
        _delay_ms(100);
        while((PINB & (1 << S3_PIN)));

        /* Move forward until obstacle detected */
        while(ultrasonic_read() > 20)
        {
            move_forward();
            _delay_ms(100);
        }

        /* Stop and wait for reconfiguration */
        stop();
        while(1)
        {
            /* Wait for start position configuration */
            if(PINB & (1 << S1_PIN))
            {
                /* Wait for button release */
                _delay_ms(100);
                while((PINB & (1 << S1_PIN)));
                break;
            }

            /* Wait for goal position configuration */
            if(PINB & (1 << S2_PIN))
            {
                /* Wait for button release */
                _delay_ms(100);
                while((PINB & (1 << S2_PIN)));
                break;
            }
        }
    }

    return 0;
}
